========== pass 1, file 't/samples/animals/python/animal.py' ==========
Scopes now: {'animal': <Scope: module >, 'animal.Animal': <Scope: class Animal>, 'animal.Animal.name': <Scope: function name>, 'animal.Mammal': <Scope: class Mammal>, 'animal.Mammal.close': <Scope: function close>, 'animal.Cat': <Scope: class Cat>, 'animal.Cat.__init__': <Scope: function __init__>, 'animal.Cat.name': <Scope: function name>, 'animal.Dog': <Scope: class Dog>, 'animal.Dog.__init__': <Scope: function __init__>, 'animal.Dog.name': <Scope: function name>, 'animal.main': <Scope: function main>}
Module animal, t/samples/animals/python/animal.py
ClassDef Animal, t/samples/animals/python/animal.py:1
Def from <Node module:animal> to Class <Node class:animal.Animal>
Set Animal in <Scope: module > to <Node class:animal.Animal>
FunctionDef name, t/samples/animals/python/animal.py:2
Def from <Node class:animal.Animal> to Function <Node method:animal.Animal.name>
Set name in <Scope: class Animal> to <Node method:animal.Animal.name>
Method def: setting self name "self" to <Node class:animal.Animal>
ClassDef Mammal, t/samples/animals/python/animal.py:5
Def from <Node module:animal> to Class <Node class:animal.Mammal>
Set Mammal in <Scope: module > to <Node class:animal.Mammal>
Name Animal in context <class 'ast.Load'>, t/samples/animals/python/animal.py:5
Get Animal in <Scope: class Mammal>, found in <Scope: module >, value <Node class:animal.Animal>
Use from <Node class:animal.Mammal> to Name <Node class:animal.Animal>
New edge added for Use from <Node class:animal.Mammal> to Name <Node class:animal.Animal>
FunctionDef close, t/samples/animals/python/animal.py:6
Def from <Node class:animal.Mammal> to Function <Node method:animal.Mammal.close>
Set close in <Scope: class Mammal> to <Node method:animal.Mammal.close>
Method def: setting self name "self" to <Node class:animal.Mammal>
ClassDef Cat, t/samples/animals/python/animal.py:9
Def from <Node module:animal> to Class <Node class:animal.Cat>
Set Cat in <Scope: module > to <Node class:animal.Cat>
Name Mammal in context <class 'ast.Load'>, t/samples/animals/python/animal.py:9
Get Mammal in <Scope: class Cat>, found in <Scope: module >, value <Node class:animal.Mammal>
Use from <Node class:animal.Cat> to Name <Node class:animal.Mammal>
New edge added for Use from <Node class:animal.Cat> to Name <Node class:animal.Mammal>
FunctionDef __init__, t/samples/animals/python/animal.py:10
Def from <Node class:animal.Cat> to Function <Node method:animal.Cat.__init__>
Set __init__ in <Scope: class Cat> to <Node method:animal.Cat.__init__>
Method def: setting self name "self" to <Node class:animal.Cat>
Assign ['self.__name'] ['name'], t/samples/animals/python/animal.py:11
Name name in context <class 'ast.Load'>, t/samples/animals/python/animal.py:11
Get name in <Scope: function __init__>, found in <Scope: function __init__>, value <Node ---:animal.Cat.__init__.^^^argument^^^>
Use from <Node method:animal.Cat.__init__> to Name <Node ---:animal.Cat.__init__.^^^argument^^^>
New edge added for Use from <Node method:animal.Cat.__init__> to Name <Node ---:animal.Cat.__init__.^^^argument^^^>
Attribute __name of self in context <class 'ast.Store'>, t/samples/animals/python/animal.py:11
Resolve self.__name in context <class 'ast.Store'>
Get self in <Scope: function __init__>, found in <Scope: function __init__>, value <Node class:animal.Cat>
Resolved to attr __name of <Node class:animal.Cat>
setattr __name on self to <Node ---:animal.Cat.__init__.^^^argument^^^>
FunctionDef name, t/samples/animals/python/animal.py:12
Def from <Node class:animal.Cat> to Function <Node method:animal.Cat.name>
Set name in <Scope: class Cat> to <Node method:animal.Cat.name>
Method def: setting self name "self" to <Node class:animal.Cat>
Attribute __name of self in context <class 'ast.Load'>, t/samples/animals/python/animal.py:13
Resolve self.__name in context <class 'ast.Load'>
Get self in <Scope: function name>, found in <Scope: function name>, value <Node class:animal.Cat>
Resolved to attr __name of <Node class:animal.Cat>
getattr __name on self returns <Node ---:animal.Cat.__init__.^^^argument^^^>
Use from <Node method:animal.Cat.name> to <Node ---:animal.Cat.__init__.^^^argument^^^>
New edge added for Use from <Node method:animal.Cat.name> to <Node ---:animal.Cat.__init__.^^^argument^^^>
ClassDef Dog, t/samples/animals/python/animal.py:15
Def from <Node module:animal> to Class <Node class:animal.Dog>
Set Dog in <Scope: module > to <Node class:animal.Dog>
Name Mammal in context <class 'ast.Load'>, t/samples/animals/python/animal.py:15
Get Mammal in <Scope: class Dog>, found in <Scope: module >, value <Node class:animal.Mammal>
Use from <Node class:animal.Dog> to Name <Node class:animal.Mammal>
New edge added for Use from <Node class:animal.Dog> to Name <Node class:animal.Mammal>
FunctionDef __init__, t/samples/animals/python/animal.py:16
Def from <Node class:animal.Dog> to Function <Node method:animal.Dog.__init__>
Set __init__ in <Scope: class Dog> to <Node method:animal.Dog.__init__>
Method def: setting self name "self" to <Node class:animal.Dog>
Assign ['self.__name'] ['name'], t/samples/animals/python/animal.py:17
Name name in context <class 'ast.Load'>, t/samples/animals/python/animal.py:17
Get name in <Scope: function __init__>, found in <Scope: function __init__>, value <Node ---:animal.Dog.__init__.^^^argument^^^>
Use from <Node method:animal.Dog.__init__> to Name <Node ---:animal.Dog.__init__.^^^argument^^^>
New edge added for Use from <Node method:animal.Dog.__init__> to Name <Node ---:animal.Dog.__init__.^^^argument^^^>
Attribute __name of self in context <class 'ast.Store'>, t/samples/animals/python/animal.py:17
Resolve self.__name in context <class 'ast.Store'>
Get self in <Scope: function __init__>, found in <Scope: function __init__>, value <Node class:animal.Dog>
Resolved to attr __name of <Node class:animal.Dog>
setattr __name on self to <Node ---:animal.Dog.__init__.^^^argument^^^>
FunctionDef name, t/samples/animals/python/animal.py:18
Def from <Node class:animal.Dog> to Function <Node method:animal.Dog.name>
Set name in <Scope: class Dog> to <Node method:animal.Dog.name>
Method def: setting self name "self" to <Node class:animal.Dog>
Attribute __name of self in context <class 'ast.Load'>, t/samples/animals/python/animal.py:19
Resolve self.__name in context <class 'ast.Load'>
Get self in <Scope: function name>, found in <Scope: function name>, value <Node class:animal.Dog>
Resolved to attr __name of <Node class:animal.Dog>
getattr __name on self returns <Node ---:animal.Dog.__init__.^^^argument^^^>
Use from <Node method:animal.Dog.name> to <Node ---:animal.Dog.__init__.^^^argument^^^>
New edge added for Use from <Node method:animal.Dog.name> to <Node ---:animal.Dog.__init__.^^^argument^^^>
FunctionDef main, t/samples/animals/python/animal.py:21
Def from <Node module:animal> to Function <Node function:animal.main>
Set main in <Scope: module > to <Node function:animal.main>
Assign ['dog'] [<ast.Call object at 0x7f71b2259540>], t/samples/animals/python/animal.py:22
Call Dog, t/samples/animals/python/animal.py:22
Constant Odie, t/samples/animals/python/animal.py:22
Name Dog in context <class 'ast.Load'>, t/samples/animals/python/animal.py:22
Get Dog in <Scope: function main>, found in <Scope: module >, value <Node class:animal.Dog>
Use from <Node function:animal.main> to Name <Node class:animal.Dog>
New edge added for Use from <Node function:animal.main> to Name <Node class:animal.Dog>
Use from <Node function:animal.main> to <Node method:animal.Dog.__init__> (call creates an instance)
New edge added for Use from <Node function:animal.main> to <Node method:animal.Dog.__init__> (call creates an instance)
Name dog in context <class 'ast.Store'>, t/samples/animals/python/animal.py:22
Set dog in <Scope: function main> to <Node class:animal.Dog>
Assign ['cat'] [<ast.Call object at 0x7f71b2259630>], t/samples/animals/python/animal.py:23
Call Cat, t/samples/animals/python/animal.py:23
Constant Garfield, t/samples/animals/python/animal.py:23
Name Cat in context <class 'ast.Load'>, t/samples/animals/python/animal.py:23
Get Cat in <Scope: function main>, found in <Scope: module >, value <Node class:animal.Cat>
Use from <Node function:animal.main> to Name <Node class:animal.Cat>
New edge added for Use from <Node function:animal.main> to Name <Node class:animal.Cat>
Use from <Node function:animal.main> to <Node method:animal.Cat.__init__> (call creates an instance)
New edge added for Use from <Node function:animal.main> to <Node method:animal.Cat.__init__> (call creates an instance)
Name cat in context <class 'ast.Store'>, t/samples/animals/python/animal.py:23
Set cat in <Scope: function main> to <Node class:animal.Cat>
Call print, t/samples/animals/python/animal.py:24
Call dog.name, t/samples/animals/python/animal.py:24
Attribute name of dog in context <class 'ast.Load'>, t/samples/animals/python/animal.py:24
Resolve dog.name in context <class 'ast.Load'>
Get dog in <Scope: function main>, found in <Scope: function main>, value <Node class:animal.Dog>
Resolved to attr name of <Node class:animal.Dog>
getattr name on dog returns <Node method:animal.Dog.name>
Use from <Node function:animal.main> to <Node method:animal.Dog.name>
New edge added for Use from <Node function:animal.main> to <Node method:animal.Dog.name>
Name print in context <class 'ast.Load'>, t/samples/animals/python/animal.py:24
Get print in <Scope: function main>: no Node value (or name not in scope)
Use from <Node function:animal.main> to Name <Node ???:*.print>
New edge added for Use from <Node function:animal.main> to Name <Node ???:*.print>
Call print, t/samples/animals/python/animal.py:25
Call cat.name, t/samples/animals/python/animal.py:25
Attribute name of cat in context <class 'ast.Load'>, t/samples/animals/python/animal.py:25
Resolve cat.name in context <class 'ast.Load'>
Get cat in <Scope: function main>, found in <Scope: function main>, value <Node class:animal.Cat>
Resolved to attr name of <Node class:animal.Cat>
getattr name on cat returns <Node method:animal.Cat.name>
Use from <Node function:animal.main> to <Node method:animal.Cat.name>
New edge added for Use from <Node function:animal.main> to <Node method:animal.Cat.name>
Name print in context <class 'ast.Load'>, t/samples/animals/python/animal.py:25
Get print in <Scope: function main>: no Node value (or name not in scope)
Use from <Node function:animal.main> to Name <Node ???:*.print>
Name __name__ in context <class 'ast.Load'>, t/samples/animals/python/animal.py:27
Get __name__ in <Scope: module >: no Node value (or name not in scope)
Use from <Node module:animal> to Name <Node ???:*.__name__>
New edge added for Use from <Node module:animal> to Name <Node ???:*.__name__>
Constant __main__, t/samples/animals/python/animal.py:27
Call main, t/samples/animals/python/animal.py:28
Name main in context <class 'ast.Load'>, t/samples/animals/python/animal.py:28
Get main in <Scope: module >, found in <Scope: module >, value <Node function:animal.main>
Use from <Node module:animal> to Name <Node function:animal.main>
New edge added for Use from <Node module:animal> to Name <Node function:animal.main>
Resolving base classes
Get Animal in <Scope: module >, found in <Scope: module >, value <Node class:animal.Animal>
Get Mammal in <Scope: module >, found in <Scope: module >, value <Node class:animal.Mammal>
Get Mammal in <Scope: module >, found in <Scope: module >, value <Node class:animal.Mammal>
All base classes (non-recursive, local level only): {<Node class:animal.Animal>: [], <Node class:animal.Mammal>: [<Node class:animal.Animal>], <Node class:animal.Cat>: [<Node class:animal.Mammal>], <Node class:animal.Dog>: [<Node class:animal.Mammal>]}
Resolving method resolution order (MRO) for all analyzed classes
MRO: analyzing class <Node class:animal.Animal>
MRO: C3 linearizing <Node class:animal.Animal>
MRO: C3 linearized <Node class:animal.Animal>, result [<Node class:animal.Animal>]
MRO: analyzing class <Node class:animal.Mammal>
MRO: C3 linearizing <Node class:animal.Mammal>
MRO: C3 linearizing <Node class:animal.Animal>
MRO: C3 linearized <Node class:animal.Animal>, result [<Node class:animal.Animal>]
MRO: parents of <Node class:animal.Mammal>: [<Node class:animal.Animal>]
MRO: C3 merging [[<Node class:animal.Animal>], [<Node class:animal.Animal>]]
MRO: C3 merge: out: [], lists: [[<Node class:animal.Animal>], [<Node class:animal.Animal>]]
MRO: C3 merge: heads: [<Node class:animal.Animal>, <Node class:animal.Animal>], tails: [[], []]
MRO: C3 merge: chose head <Node class:animal.Animal>
MRO: C3 merge: out: [<Node class:animal.Animal>], lists: [[], []]
MRO: C3 linearized <Node class:animal.Mammal>, result [<Node class:animal.Mammal>, <Node class:animal.Animal>]
MRO: analyzing class <Node class:animal.Cat>
MRO: C3 linearizing <Node class:animal.Cat>
MRO: C3 linearizing <Node class:animal.Mammal>
MRO: C3 linearized <Node class:animal.Mammal>, result [<Node class:animal.Mammal>, <Node class:animal.Animal>]
MRO: parents of <Node class:animal.Cat>: [<Node class:animal.Mammal>]
MRO: C3 merging [[<Node class:animal.Mammal>, <Node class:animal.Animal>], [<Node class:animal.Mammal>]]
MRO: C3 merge: out: [], lists: [[<Node class:animal.Mammal>, <Node class:animal.Animal>], [<Node class:animal.Mammal>]]
MRO: C3 merge: heads: [<Node class:animal.Mammal>, <Node class:animal.Mammal>], tails: [[<Node class:animal.Animal>], []]
MRO: C3 merge: chose head <Node class:animal.Mammal>
MRO: C3 merge: out: [<Node class:animal.Mammal>], lists: [[<Node class:animal.Animal>], []]
MRO: C3 merge: heads: [<Node class:animal.Animal>], tails: [[], []]
MRO: C3 merge: chose head <Node class:animal.Animal>
MRO: C3 merge: out: [<Node class:animal.Mammal>, <Node class:animal.Animal>], lists: [[], []]
MRO: C3 linearized <Node class:animal.Cat>, result [<Node class:animal.Cat>, <Node class:animal.Mammal>, <Node class:animal.Animal>]
MRO: analyzing class <Node class:animal.Dog>
MRO: C3 linearizing <Node class:animal.Dog>
MRO: C3 linearizing <Node class:animal.Mammal>
MRO: C3 linearized <Node class:animal.Mammal>, result [<Node class:animal.Mammal>, <Node class:animal.Animal>]
MRO: parents of <Node class:animal.Dog>: [<Node class:animal.Mammal>]
MRO: C3 merging [[<Node class:animal.Mammal>, <Node class:animal.Animal>], [<Node class:animal.Mammal>]]
MRO: C3 merge: out: [], lists: [[<Node class:animal.Mammal>, <Node class:animal.Animal>], [<Node class:animal.Mammal>]]
MRO: C3 merge: heads: [<Node class:animal.Mammal>, <Node class:animal.Mammal>], tails: [[<Node class:animal.Animal>], []]
MRO: C3 merge: chose head <Node class:animal.Mammal>
MRO: C3 merge: out: [<Node class:animal.Mammal>], lists: [[<Node class:animal.Animal>], []]
MRO: C3 merge: heads: [<Node class:animal.Animal>], tails: [[], []]
MRO: C3 merge: chose head <Node class:animal.Animal>
MRO: C3 merge: out: [<Node class:animal.Mammal>, <Node class:animal.Animal>], lists: [[], []]
MRO: C3 linearized <Node class:animal.Dog>, result [<Node class:animal.Dog>, <Node class:animal.Mammal>, <Node class:animal.Animal>]
Method resolution order (MRO) for all analyzed classes: {<Node class:animal.Animal>: [<Node class:animal.Animal>], <Node class:animal.Mammal>: [<Node class:animal.Mammal>, <Node class:animal.Animal>], <Node class:animal.Cat>: [<Node class:animal.Cat>, <Node class:animal.Mammal>, <Node class:animal.Animal>], <Node class:animal.Dog>: [<Node class:animal.Dog>, <Node class:animal.Mammal>, <Node class:animal.Animal>]}
========== pass 2, file 't/samples/animals/python/animal.py' ==========
Scopes now: {'animal': <Scope: module >, 'animal.Animal': <Scope: class Animal>, 'animal.Animal.name': <Scope: function name>, 'animal.Mammal': <Scope: class Mammal>, 'animal.Mammal.close': <Scope: function close>, 'animal.Cat': <Scope: class Cat>, 'animal.Cat.__init__': <Scope: function __init__>, 'animal.Cat.name': <Scope: function name>, 'animal.Dog': <Scope: class Dog>, 'animal.Dog.__init__': <Scope: function __init__>, 'animal.Dog.name': <Scope: function name>, 'animal.main': <Scope: function main>}
Module animal, t/samples/animals/python/animal.py
ClassDef Animal, t/samples/animals/python/animal.py:1
Set Animal in <Scope: module > to <Node class:animal.Animal>
FunctionDef name, t/samples/animals/python/animal.py:2
Set name in <Scope: class Animal> to <Node method:animal.Animal.name>
Method def: setting self name "self" to <Node class:animal.Animal>
ClassDef Mammal, t/samples/animals/python/animal.py:5
Set Mammal in <Scope: module > to <Node class:animal.Mammal>
Name Animal in context <class 'ast.Load'>, t/samples/animals/python/animal.py:5
Get Animal in <Scope: class Mammal>, found in <Scope: module >, value <Node class:animal.Animal>
Use from <Node class:animal.Mammal> to Name <Node class:animal.Animal>
FunctionDef close, t/samples/animals/python/animal.py:6
Set close in <Scope: class Mammal> to <Node method:animal.Mammal.close>
Method def: setting self name "self" to <Node class:animal.Mammal>
ClassDef Cat, t/samples/animals/python/animal.py:9
Set Cat in <Scope: module > to <Node class:animal.Cat>
Name Mammal in context <class 'ast.Load'>, t/samples/animals/python/animal.py:9
Get Mammal in <Scope: class Cat>, found in <Scope: module >, value <Node class:animal.Mammal>
Use from <Node class:animal.Cat> to Name <Node class:animal.Mammal>
FunctionDef __init__, t/samples/animals/python/animal.py:10
Set __init__ in <Scope: class Cat> to <Node method:animal.Cat.__init__>
Method def: setting self name "self" to <Node class:animal.Cat>
Assign ['self.__name'] ['name'], t/samples/animals/python/animal.py:11
Name name in context <class 'ast.Load'>, t/samples/animals/python/animal.py:11
Get name in <Scope: function __init__>, found in <Scope: function __init__>, value <Node ---:animal.Cat.__init__.^^^argument^^^>
Use from <Node method:animal.Cat.__init__> to Name <Node ---:animal.Cat.__init__.^^^argument^^^>
Attribute __name of self in context <class 'ast.Store'>, t/samples/animals/python/animal.py:11
Resolve self.__name in context <class 'ast.Store'>
Get self in <Scope: function __init__>, found in <Scope: function __init__>, value <Node class:animal.Cat>
Resolved to attr __name of <Node class:animal.Cat>
setattr __name on self to <Node ---:animal.Cat.__init__.^^^argument^^^>
FunctionDef name, t/samples/animals/python/animal.py:12
Set name in <Scope: class Cat> to <Node method:animal.Cat.name>
Method def: setting self name "self" to <Node class:animal.Cat>
Attribute __name of self in context <class 'ast.Load'>, t/samples/animals/python/animal.py:13
Resolve self.__name in context <class 'ast.Load'>
Get self in <Scope: function name>, found in <Scope: function name>, value <Node class:animal.Cat>
Resolved to attr __name of <Node class:animal.Cat>
getattr __name on self returns <Node ---:animal.Cat.__init__.^^^argument^^^>
Use from <Node method:animal.Cat.name> to <Node ---:animal.Cat.__init__.^^^argument^^^>
ClassDef Dog, t/samples/animals/python/animal.py:15
Set Dog in <Scope: module > to <Node class:animal.Dog>
Name Mammal in context <class 'ast.Load'>, t/samples/animals/python/animal.py:15
Get Mammal in <Scope: class Dog>, found in <Scope: module >, value <Node class:animal.Mammal>
Use from <Node class:animal.Dog> to Name <Node class:animal.Mammal>
FunctionDef __init__, t/samples/animals/python/animal.py:16
Set __init__ in <Scope: class Dog> to <Node method:animal.Dog.__init__>
Method def: setting self name "self" to <Node class:animal.Dog>
Assign ['self.__name'] ['name'], t/samples/animals/python/animal.py:17
Name name in context <class 'ast.Load'>, t/samples/animals/python/animal.py:17
Get name in <Scope: function __init__>, found in <Scope: function __init__>, value <Node ---:animal.Dog.__init__.^^^argument^^^>
Use from <Node method:animal.Dog.__init__> to Name <Node ---:animal.Dog.__init__.^^^argument^^^>
Attribute __name of self in context <class 'ast.Store'>, t/samples/animals/python/animal.py:17
Resolve self.__name in context <class 'ast.Store'>
Get self in <Scope: function __init__>, found in <Scope: function __init__>, value <Node class:animal.Dog>
Resolved to attr __name of <Node class:animal.Dog>
setattr __name on self to <Node ---:animal.Dog.__init__.^^^argument^^^>
FunctionDef name, t/samples/animals/python/animal.py:18
Set name in <Scope: class Dog> to <Node method:animal.Dog.name>
Method def: setting self name "self" to <Node class:animal.Dog>
Attribute __name of self in context <class 'ast.Load'>, t/samples/animals/python/animal.py:19
Resolve self.__name in context <class 'ast.Load'>
Get self in <Scope: function name>, found in <Scope: function name>, value <Node class:animal.Dog>
Resolved to attr __name of <Node class:animal.Dog>
getattr __name on self returns <Node ---:animal.Dog.__init__.^^^argument^^^>
Use from <Node method:animal.Dog.name> to <Node ---:animal.Dog.__init__.^^^argument^^^>
FunctionDef main, t/samples/animals/python/animal.py:21
Set main in <Scope: module > to <Node function:animal.main>
Assign ['dog'] [<ast.Call object at 0x7f71b225b0a0>], t/samples/animals/python/animal.py:22
Call Dog, t/samples/animals/python/animal.py:22
Constant Odie, t/samples/animals/python/animal.py:22
Name Dog in context <class 'ast.Load'>, t/samples/animals/python/animal.py:22
Get Dog in <Scope: function main>, found in <Scope: module >, value <Node class:animal.Dog>
Use from <Node function:animal.main> to Name <Node class:animal.Dog>
Use from <Node function:animal.main> to <Node method:animal.Dog.__init__> (call creates an instance)
Name dog in context <class 'ast.Store'>, t/samples/animals/python/animal.py:22
Set dog in <Scope: function main> to <Node class:animal.Dog>
Assign ['cat'] [<ast.Call object at 0x7f71b225b6d0>], t/samples/animals/python/animal.py:23
Call Cat, t/samples/animals/python/animal.py:23
Constant Garfield, t/samples/animals/python/animal.py:23
Name Cat in context <class 'ast.Load'>, t/samples/animals/python/animal.py:23
Get Cat in <Scope: function main>, found in <Scope: module >, value <Node class:animal.Cat>
Use from <Node function:animal.main> to Name <Node class:animal.Cat>
Use from <Node function:animal.main> to <Node method:animal.Cat.__init__> (call creates an instance)
Name cat in context <class 'ast.Store'>, t/samples/animals/python/animal.py:23
Set cat in <Scope: function main> to <Node class:animal.Cat>
Call print, t/samples/animals/python/animal.py:24
Call dog.name, t/samples/animals/python/animal.py:24
Attribute name of dog in context <class 'ast.Load'>, t/samples/animals/python/animal.py:24
Resolve dog.name in context <class 'ast.Load'>
Get dog in <Scope: function main>, found in <Scope: function main>, value <Node class:animal.Dog>
Resolved to attr name of <Node class:animal.Dog>
getattr name on dog returns <Node method:animal.Dog.name>
Use from <Node function:animal.main> to <Node method:animal.Dog.name>
Name print in context <class 'ast.Load'>, t/samples/animals/python/animal.py:24
Get print in <Scope: function main>: no Node value (or name not in scope)
Use from <Node function:animal.main> to Name <Node ???:*.print>
Call print, t/samples/animals/python/animal.py:25
Call cat.name, t/samples/animals/python/animal.py:25
Attribute name of cat in context <class 'ast.Load'>, t/samples/animals/python/animal.py:25
Resolve cat.name in context <class 'ast.Load'>
Get cat in <Scope: function main>, found in <Scope: function main>, value <Node class:animal.Cat>
Resolved to attr name of <Node class:animal.Cat>
getattr name on cat returns <Node method:animal.Cat.name>
Use from <Node function:animal.main> to <Node method:animal.Cat.name>
Name print in context <class 'ast.Load'>, t/samples/animals/python/animal.py:25
Get print in <Scope: function main>: no Node value (or name not in scope)
Use from <Node function:animal.main> to Name <Node ???:*.print>
Name __name__ in context <class 'ast.Load'>, t/samples/animals/python/animal.py:27
Get __name__ in <Scope: module >: no Node value (or name not in scope)
Use from <Node module:animal> to Name <Node ???:*.__name__>
Constant __main__, t/samples/animals/python/animal.py:27
Call main, t/samples/animals/python/animal.py:28
Name main in context <class 'ast.Load'>, t/samples/animals/python/animal.py:28
Get main in <Scope: module >, found in <Scope: module >, value <Node function:animal.main>
Use from <Node module:animal> to Name <Node function:animal.main>
Contracting non-existent from <Node method:animal.Cat.__init__> to <Node ---:animal.Cat.__init__.^^^argument^^^> as <Node ---:*.^^^argument^^^>
Contracting non-existent from <Node method:animal.Cat.name> to <Node ---:animal.Cat.__init__.^^^argument^^^> as <Node ---:*.^^^argument^^^>
Contracting non-existent from <Node method:animal.Dog.__init__> to <Node ---:animal.Dog.__init__.^^^argument^^^> as <Node ---:*.^^^argument^^^>
Contracting non-existent from <Node method:animal.Dog.name> to <Node ---:animal.Dog.__init__.^^^argument^^^> as <Node ---:*.^^^argument^^^>
Looking at animal
Coloring animal from file 't/samples/animals/python/animal.py'
Looking at Animal
Coloring Animal from file 't/samples/animals/python/animal.py'
New namespace animal
Looking at Cat
Coloring Cat from file 't/samples/animals/python/animal.py'
Looking at Dog
Coloring Dog from file 't/samples/animals/python/animal.py'
Looking at Mammal
Coloring Mammal from file 't/samples/animals/python/animal.py'
Looking at main
Coloring main from file 't/samples/animals/python/animal.py'
Looking at name
Coloring name from file 't/samples/animals/python/animal.py'
New namespace animal.Animal, old was animal
Looking at __init__
Coloring __init__ from file 't/samples/animals/python/animal.py'
New namespace animal.Cat, old was animal.Animal
Looking at name
Coloring name from file 't/samples/animals/python/animal.py'
Looking at __init__
Coloring __init__ from file 't/samples/animals/python/animal.py'
New namespace animal.Dog, old was animal.Cat
Looking at name
Coloring name from file 't/samples/animals/python/animal.py'
Looking at close
Coloring close from file 't/samples/animals/python/animal.py'
New namespace animal.Mammal, old was animal.Dog
<class 'pyan.writers.TgfWriter'> running
